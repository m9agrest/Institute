id: lab7
language: CSharp
name:
  Default: lab7
qualifiedName:
  Default: lab7
type: Assembly
modifiers: {}
items:
- id: lab7
  commentId: N:lab7
  language: CSharp
  name:
    CSharp: lab7
    VB: lab7
  nameWithType:
    CSharp: lab7
    VB: lab7
  qualifiedName:
    CSharp: lab7
    VB: lab7
  type: Namespace
  assemblies:
  - lab7
  modifiers: {}
  items:
  - id: lab7.Circle
    commentId: T:lab7.Circle
    language: CSharp
    name:
      CSharp: Circle
      VB: Circle
    nameWithType:
      CSharp: Circle
      VB: Circle
    qualifiedName:
      CSharp: lab7.Circle
      VB: lab7.Circle
    type: Class
    assemblies:
    - lab7
    namespace: lab7
    source:
      id: Circle
      path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Circle.cs
      startLine: 10
    summary: "\nОбъект для хранения и работы с фигурой круг\n"
    example: []
    syntax:
      content:
        CSharp: 'public class Circle : Figure'
        VB: >-
          Public Class Circle

              Inherits Figure
    inheritance:
    - System.Object
    - lab7.Figure
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: lab7.Circle.Square
      commentId: P:lab7.Circle.Square
      language: CSharp
      name:
        CSharp: Square
        VB: Square
      nameWithType:
        CSharp: Circle.Square
        VB: Circle.Square
      qualifiedName:
        CSharp: lab7.Circle.Square
        VB: lab7.Circle.Square
      type: Property
      assemblies:
      - lab7
      namespace: lab7
      source:
        id: Square
        path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Circle.cs
        startLine: 13
      syntax:
        content:
          CSharp: public override double Square { get; }
          VB: Public Overrides ReadOnly Property Square As Double
        parameters: []
        return:
          type: System.Double
      overload: lab7.Circle.Square*
      overridden: lab7.Figure.Square
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: lab7.Circle.Perimeter
      commentId: P:lab7.Circle.Perimeter
      language: CSharp
      name:
        CSharp: Perimeter
        VB: Perimeter
      nameWithType:
        CSharp: Circle.Perimeter
        VB: Circle.Perimeter
      qualifiedName:
        CSharp: lab7.Circle.Perimeter
        VB: lab7.Circle.Perimeter
      type: Property
      assemblies:
      - lab7
      namespace: lab7
      source:
        id: Perimeter
        path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Circle.cs
        startLine: 17
      syntax:
        content:
          CSharp: public override double Perimeter { get; }
          VB: Public Overrides ReadOnly Property Perimeter As Double
        parameters: []
        return:
          type: System.Double
      overload: lab7.Circle.Perimeter*
      overridden: lab7.Figure.Perimeter
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: lab7.Circle.Center
      commentId: P:lab7.Circle.Center
      language: CSharp
      name:
        CSharp: Center
        VB: Center
      nameWithType:
        CSharp: Circle.Center
        VB: Circle.Center
      qualifiedName:
        CSharp: lab7.Circle.Center
        VB: lab7.Circle.Center
      type: Property
      assemblies:
      - lab7
      namespace: lab7
      source:
        id: Center
        path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Circle.cs
        startLine: 21
      syntax:
        content:
          CSharp: public override Position Center { get; }
          VB: Public Overrides ReadOnly Property Center As Position
        parameters: []
        return:
          type: lab7.Position
      overload: lab7.Circle.Center*
      overridden: lab7.Figure.Center
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: lab7.Circle.#ctor(System.Double)
      commentId: M:lab7.Circle.#ctor(System.Double)
      language: CSharp
      name:
        CSharp: Circle(Double)
        VB: Circle(Double)
      nameWithType:
        CSharp: Circle.Circle(Double)
        VB: Circle.Circle(Double)
      qualifiedName:
        CSharp: lab7.Circle.Circle(System.Double)
        VB: lab7.Circle.Circle(System.Double)
      type: Constructor
      assemblies:
      - lab7
      namespace: lab7
      source:
        id: .ctor
        path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Circle.cs
        startLine: 29
      summary: "\nКонструктор фигуры круг\n"
      example: []
      syntax:
        content:
          CSharp: public Circle(double Radius)
          VB: Public Sub New(Radius As Double)
        parameters:
        - id: Radius
          type: System.Double
          description: Радиус круга
      overload: lab7.Circle.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: lab7.Circle.ToString
      commentId: M:lab7.Circle.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: Circle.ToString()
        VB: Circle.ToString()
      qualifiedName:
        CSharp: lab7.Circle.ToString()
        VB: lab7.Circle.ToString()
      type: Method
      assemblies:
      - lab7
      namespace: lab7
      source:
        id: ToString
        path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Circle.cs
        startLine: 33
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: lab7.Circle.ToString*
      overridden: lab7.Figure.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: lab7.Circle.setPosition(lab7.Position)
      commentId: M:lab7.Circle.setPosition(lab7.Position)
      language: CSharp
      name:
        CSharp: setPosition(Position)
        VB: setPosition(Position)
      nameWithType:
        CSharp: Circle.setPosition(Position)
        VB: Circle.setPosition(Position)
      qualifiedName:
        CSharp: lab7.Circle.setPosition(lab7.Position)
        VB: lab7.Circle.setPosition(lab7.Position)
      type: Method
      assemblies:
      - lab7
      namespace: lab7
      source:
        id: setPosition
        path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Circle.cs
        startLine: 42
      summary: "\nУстановить позицию фигуры\n"
      example: []
      syntax:
        content:
          CSharp: public void setPosition(Position p)
          VB: Public Sub setPosition(p As Position)
        parameters:
        - id: p
          type: lab7.Position
          description: координаты позиции, центра
      overload: lab7.Circle.setPosition*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: lab7.Figure
    commentId: T:lab7.Figure
    language: CSharp
    name:
      CSharp: Figure
      VB: Figure
    nameWithType:
      CSharp: Figure
      VB: Figure
    qualifiedName:
      CSharp: lab7.Figure
      VB: lab7.Figure
    type: Class
    assemblies:
    - lab7
    namespace: lab7
    source:
      id: Figure
      path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Figure.cs
      startLine: 11
    summary: "\nОбъект для хранения фигуры и работы с ней.\nСоздан в качестве родителя, чтобы от него наследовались остальные фигуры\n"
    example: []
    syntax:
      content:
        CSharp: public abstract class Figure
        VB: Public MustInherit Class Figure
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: lab7.Figure.Square
      commentId: P:lab7.Figure.Square
      language: CSharp
      name:
        CSharp: Square
        VB: Square
      nameWithType:
        CSharp: Figure.Square
        VB: Figure.Square
      qualifiedName:
        CSharp: lab7.Figure.Square
        VB: lab7.Figure.Square
      type: Property
      assemblies:
      - lab7
      namespace: lab7
      source:
        id: Square
        path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Figure.cs
        startLine: 16
      summary: "\nПлощадь фигуры\n"
      example: []
      syntax:
        content:
          CSharp: public virtual double Square { get; }
          VB: Public Overridable ReadOnly Property Square As Double
        parameters: []
        return:
          type: System.Double
      overload: lab7.Figure.Square*
      modifiers:
        CSharp:
        - public
        - virtual
        - get
        VB:
        - Public
        - Overridable
        - ReadOnly
    - id: lab7.Figure.Perimeter
      commentId: P:lab7.Figure.Perimeter
      language: CSharp
      name:
        CSharp: Perimeter
        VB: Perimeter
      nameWithType:
        CSharp: Figure.Perimeter
        VB: Figure.Perimeter
      qualifiedName:
        CSharp: lab7.Figure.Perimeter
        VB: lab7.Figure.Perimeter
      type: Property
      assemblies:
      - lab7
      namespace: lab7
      source:
        id: Perimeter
        path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Figure.cs
        startLine: 23
      summary: "\nПериметр фигуры\n"
      example: []
      syntax:
        content:
          CSharp: public virtual double Perimeter { get; }
          VB: Public Overridable ReadOnly Property Perimeter As Double
        parameters: []
        return:
          type: System.Double
      overload: lab7.Figure.Perimeter*
      modifiers:
        CSharp:
        - public
        - virtual
        - get
        VB:
        - Public
        - Overridable
        - ReadOnly
    - id: lab7.Figure.#ctor
      commentId: M:lab7.Figure.#ctor
      language: CSharp
      name:
        CSharp: Figure()
        VB: Figure()
      nameWithType:
        CSharp: Figure.Figure()
        VB: Figure.Figure()
      qualifiedName:
        CSharp: lab7.Figure.Figure()
        VB: lab7.Figure.Figure()
      type: Constructor
      assemblies:
      - lab7
      namespace: lab7
      source:
        id: .ctor
        path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Figure.cs
        startLine: 30
      summary: "\nБазовый конструктор\n"
      example: []
      syntax:
        content:
          CSharp: public Figure()
          VB: Public Sub New
      overload: lab7.Figure.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: lab7.Figure.setPosition(lab7.Position)
      commentId: M:lab7.Figure.setPosition(lab7.Position)
      language: CSharp
      name:
        CSharp: setPosition(Position)
        VB: setPosition(Position)
      nameWithType:
        CSharp: Figure.setPosition(Position)
        VB: Figure.setPosition(Position)
      qualifiedName:
        CSharp: lab7.Figure.setPosition(lab7.Position)
        VB: lab7.Figure.setPosition(lab7.Position)
      type: Method
      assemblies:
      - lab7
      namespace: lab7
      source:
        id: setPosition
        path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Figure.cs
        startLine: 41
      summary: "\nУстановить позицию фигуры\n"
      example: []
      syntax:
        content:
          CSharp: public void setPosition(Position p)
          VB: Public Sub setPosition(p As Position)
        parameters:
        - id: p
          type: lab7.Position
          description: координаты позиции, нижний левый угол
      overload: lab7.Figure.setPosition*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: lab7.Figure.Center
      commentId: P:lab7.Figure.Center
      language: CSharp
      name:
        CSharp: Center
        VB: Center
      nameWithType:
        CSharp: Figure.Center
        VB: Figure.Center
      qualifiedName:
        CSharp: lab7.Figure.Center
        VB: lab7.Figure.Center
      type: Property
      assemblies:
      - lab7
      namespace: lab7
      source:
        id: Center
        path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Figure.cs
        startLine: 46
      summary: "\nПозиция центра фигуры\n"
      example: []
      syntax:
        content:
          CSharp: public virtual Position Center { get; }
          VB: Public Overridable ReadOnly Property Center As Position
        parameters: []
        return:
          type: lab7.Position
      overload: lab7.Figure.Center*
      modifiers:
        CSharp:
        - public
        - virtual
        - get
        VB:
        - Public
        - Overridable
        - ReadOnly
    - id: lab7.Figure.ToString
      commentId: M:lab7.Figure.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: Figure.ToString()
        VB: Figure.ToString()
      qualifiedName:
        CSharp: lab7.Figure.ToString()
        VB: lab7.Figure.ToString()
      type: Method
      assemblies:
      - lab7
      namespace: lab7
      source:
        id: ToString
        path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Figure.cs
        startLine: 55
      summary: "\nФорматирование строкового представления\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
          description: Сформатированное строковое представление
      overload: lab7.Figure.ToString*
      overridden: System.Object.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: lab7.Position
    commentId: T:lab7.Position
    language: CSharp
    name:
      CSharp: Position
      VB: Position
    nameWithType:
      CSharp: Position
      VB: Position
    qualifiedName:
      CSharp: lab7.Position
      VB: lab7.Position
    type: Class
    assemblies:
    - lab7
    namespace: lab7
    source:
      id: Position
      path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Position.cs
      startLine: 10
    summary: "\nОбъект для хранения и работы позиций\n"
    example: []
    syntax:
      content:
        CSharp: public class Position
        VB: Public Class Position
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: lab7.Position.X
      commentId: F:lab7.Position.X
      language: CSharp
      name:
        CSharp: X
        VB: X
      nameWithType:
        CSharp: Position.X
        VB: Position.X
      qualifiedName:
        CSharp: lab7.Position.X
        VB: lab7.Position.X
      type: Field
      assemblies:
      - lab7
      namespace: lab7
      source:
        id: X
        path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Position.cs
        startLine: 15
      summary: "\nКоордината X\n"
      example: []
      syntax:
        content:
          CSharp: public double X
          VB: Public X As Double
        return:
          type: System.Double
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: lab7.Position.Y
      commentId: F:lab7.Position.Y
      language: CSharp
      name:
        CSharp: Y
        VB: Y
      nameWithType:
        CSharp: Position.Y
        VB: Position.Y
      qualifiedName:
        CSharp: lab7.Position.Y
        VB: lab7.Position.Y
      type: Field
      assemblies:
      - lab7
      namespace: lab7
      source:
        id: Y
        path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Position.cs
        startLine: 19
      summary: "\nКоордината Y\n"
      example: []
      syntax:
        content:
          CSharp: public double Y
          VB: Public Y As Double
        return:
          type: System.Double
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: lab7.Position.#ctor(System.Double,System.Double)
      commentId: M:lab7.Position.#ctor(System.Double,System.Double)
      language: CSharp
      name:
        CSharp: Position(Double, Double)
        VB: Position(Double, Double)
      nameWithType:
        CSharp: Position.Position(Double, Double)
        VB: Position.Position(Double, Double)
      qualifiedName:
        CSharp: lab7.Position.Position(System.Double, System.Double)
        VB: lab7.Position.Position(System.Double, System.Double)
      type: Constructor
      assemblies:
      - lab7
      namespace: lab7
      source:
        id: .ctor
        path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Position.cs
        startLine: 25
      summary: "\nКонструктор\n"
      example: []
      syntax:
        content:
          CSharp: public Position(double x, double y)
          VB: Public Sub New(x As Double, y As Double)
        parameters:
        - id: x
          type: System.Double
          description: Координата X
        - id: y
          type: System.Double
          description: Координата Y
      overload: lab7.Position.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: lab7.Position.#ctor
      commentId: M:lab7.Position.#ctor
      language: CSharp
      name:
        CSharp: Position()
        VB: Position()
      nameWithType:
        CSharp: Position.Position()
        VB: Position.Position()
      qualifiedName:
        CSharp: lab7.Position.Position()
        VB: lab7.Position.Position()
      type: Constructor
      assemblies:
      - lab7
      namespace: lab7
      source:
        id: .ctor
        path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Position.cs
        startLine: 33
      summary: "\nКонструктор, который за X и Y берёт 0\n"
      example: []
      syntax:
        content:
          CSharp: public Position()
          VB: Public Sub New
      overload: lab7.Position.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: lab7.Position.ToString
      commentId: M:lab7.Position.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: Position.ToString()
        VB: Position.ToString()
      qualifiedName:
        CSharp: lab7.Position.ToString()
        VB: lab7.Position.ToString()
      type: Method
      assemblies:
      - lab7
      namespace: lab7
      source:
        id: ToString
        path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Position.cs
        startLine: 39
      summary: "\nФорматирование строкового представления\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
          description: Сформатированное строковое представление
      overload: lab7.Position.ToString*
      overridden: System.Object.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: lab7.program
    commentId: T:lab7.program
    language: CSharp
    name:
      CSharp: program
      VB: program
    nameWithType:
      CSharp: program
      VB: program
    qualifiedName:
      CSharp: lab7.program
      VB: lab7.program
    type: Class
    assemblies:
    - lab7
    namespace: lab7
    source:
      id: program
      path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Program.cs
      startLine: 2
    syntax:
      content:
        CSharp: public class program
        VB: Public Class program
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: lab7.program.Pictures
      commentId: F:lab7.program.Pictures
      language: CSharp
      name:
        CSharp: Pictures
        VB: Pictures
      nameWithType:
        CSharp: program.Pictures
        VB: program.Pictures
      qualifiedName:
        CSharp: lab7.program.Pictures
        VB: lab7.program.Pictures
      type: Field
      assemblies:
      - lab7
      namespace: lab7
      source:
        id: Pictures
        path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Program.cs
        startLine: 7
      summary: "\nДинамическая коллекция фигур\n"
      example: []
      syntax:
        content:
          CSharp: public static List<Figure> Pictures
          VB: Public Shared Pictures As List(Of Figure)
        return:
          type: List{lab7.Figure}
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: lab7.Rectangle
    commentId: T:lab7.Rectangle
    language: CSharp
    name:
      CSharp: Rectangle
      VB: Rectangle
    nameWithType:
      CSharp: Rectangle
      VB: Rectangle
    qualifiedName:
      CSharp: lab7.Rectangle
      VB: lab7.Rectangle
    type: Class
    assemblies:
    - lab7
    namespace: lab7
    source:
      id: Rectangle
      path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Rectangle.cs
      startLine: 10
    summary: "\nОбъект для хранения и работы с фигурой прямоугольник\n"
    example: []
    syntax:
      content:
        CSharp: 'public class Rectangle : Figure'
        VB: >-
          Public Class Rectangle

              Inherits Figure
    inheritance:
    - System.Object
    - lab7.Figure
    inheritedMembers:
    - lab7.Figure.setPosition(lab7.Position)
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: lab7.Rectangle.Square
      commentId: P:lab7.Rectangle.Square
      language: CSharp
      name:
        CSharp: Square
        VB: Square
      nameWithType:
        CSharp: Rectangle.Square
        VB: Rectangle.Square
      qualifiedName:
        CSharp: lab7.Rectangle.Square
        VB: lab7.Rectangle.Square
      type: Property
      assemblies:
      - lab7
      namespace: lab7
      source:
        id: Square
        path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Rectangle.cs
        startLine: 14
      syntax:
        content:
          CSharp: public override double Square { get; }
          VB: Public Overrides ReadOnly Property Square As Double
        parameters: []
        return:
          type: System.Double
      overload: lab7.Rectangle.Square*
      overridden: lab7.Figure.Square
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: lab7.Rectangle.Perimeter
      commentId: P:lab7.Rectangle.Perimeter
      language: CSharp
      name:
        CSharp: Perimeter
        VB: Perimeter
      nameWithType:
        CSharp: Rectangle.Perimeter
        VB: Rectangle.Perimeter
      qualifiedName:
        CSharp: lab7.Rectangle.Perimeter
        VB: lab7.Rectangle.Perimeter
      type: Property
      assemblies:
      - lab7
      namespace: lab7
      source:
        id: Perimeter
        path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Rectangle.cs
        startLine: 18
      syntax:
        content:
          CSharp: public override double Perimeter { get; }
          VB: Public Overrides ReadOnly Property Perimeter As Double
        parameters: []
        return:
          type: System.Double
      overload: lab7.Rectangle.Perimeter*
      overridden: lab7.Figure.Perimeter
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: lab7.Rectangle.Center
      commentId: P:lab7.Rectangle.Center
      language: CSharp
      name:
        CSharp: Center
        VB: Center
      nameWithType:
        CSharp: Rectangle.Center
        VB: Rectangle.Center
      qualifiedName:
        CSharp: lab7.Rectangle.Center
        VB: lab7.Rectangle.Center
      type: Property
      assemblies:
      - lab7
      namespace: lab7
      source:
        id: Center
        path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Rectangle.cs
        startLine: 22
      syntax:
        content:
          CSharp: public override Position Center { get; }
          VB: Public Overrides ReadOnly Property Center As Position
        parameters: []
        return:
          type: lab7.Position
      overload: lab7.Rectangle.Center*
      overridden: lab7.Figure.Center
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: lab7.Rectangle.#ctor(System.Double,System.Double)
      commentId: M:lab7.Rectangle.#ctor(System.Double,System.Double)
      language: CSharp
      name:
        CSharp: Rectangle(Double, Double)
        VB: Rectangle(Double, Double)
      nameWithType:
        CSharp: Rectangle.Rectangle(Double, Double)
        VB: Rectangle.Rectangle(Double, Double)
      qualifiedName:
        CSharp: lab7.Rectangle.Rectangle(System.Double, System.Double)
        VB: lab7.Rectangle.Rectangle(System.Double, System.Double)
      type: Constructor
      assemblies:
      - lab7
      namespace: lab7
      source:
        id: .ctor
        path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Rectangle.cs
        startLine: 31
      summary: "\nКонструктор прямоугольной фигуры\n"
      example: []
      syntax:
        content:
          CSharp: public Rectangle(double Width, double Height)
          VB: Public Sub New(Width As Double, Height As Double)
        parameters:
        - id: Width
          type: System.Double
          description: Ширина прямоугольника
        - id: Height
          type: System.Double
          description: Длинна прямоугольника
      overload: lab7.Rectangle.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: lab7.Rectangle.ToString
      commentId: M:lab7.Rectangle.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: Rectangle.ToString()
        VB: Rectangle.ToString()
      qualifiedName:
        CSharp: lab7.Rectangle.ToString()
        VB: lab7.Rectangle.ToString()
      type: Method
      assemblies:
      - lab7
      namespace: lab7
      source:
        id: ToString
        path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Rectangle.cs
        startLine: 36
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: lab7.Rectangle.ToString*
      overridden: lab7.Figure.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: lab7.Trapezium
    commentId: T:lab7.Trapezium
    language: CSharp
    name:
      CSharp: Trapezium
      VB: Trapezium
    nameWithType:
      CSharp: Trapezium
      VB: Trapezium
    qualifiedName:
      CSharp: lab7.Trapezium
      VB: lab7.Trapezium
    type: Class
    assemblies:
    - lab7
    namespace: lab7
    source:
      id: Trapezium
      path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Trapezium.cs
      startLine: 10
    summary: "\nОбъект для хранения и работы с фигурой трапеция\n"
    example: []
    syntax:
      content:
        CSharp: 'public class Trapezium : Figure'
        VB: >-
          Public Class Trapezium

              Inherits Figure
    inheritance:
    - System.Object
    - lab7.Figure
    inheritedMembers:
    - lab7.Figure.setPosition(lab7.Position)
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: lab7.Trapezium.Square
      commentId: P:lab7.Trapezium.Square
      language: CSharp
      name:
        CSharp: Square
        VB: Square
      nameWithType:
        CSharp: Trapezium.Square
        VB: Trapezium.Square
      qualifiedName:
        CSharp: lab7.Trapezium.Square
        VB: lab7.Trapezium.Square
      type: Property
      assemblies:
      - lab7
      namespace: lab7
      source:
        id: Square
        path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Trapezium.cs
        startLine: 17
      syntax:
        content:
          CSharp: public override double Square { get; }
          VB: Public Overrides ReadOnly Property Square As Double
        parameters: []
        return:
          type: System.Double
      overload: lab7.Trapezium.Square*
      overridden: lab7.Figure.Square
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: lab7.Trapezium.Perimeter
      commentId: P:lab7.Trapezium.Perimeter
      language: CSharp
      name:
        CSharp: Perimeter
        VB: Perimeter
      nameWithType:
        CSharp: Trapezium.Perimeter
        VB: Trapezium.Perimeter
      qualifiedName:
        CSharp: lab7.Trapezium.Perimeter
        VB: lab7.Trapezium.Perimeter
      type: Property
      assemblies:
      - lab7
      namespace: lab7
      source:
        id: Perimeter
        path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Trapezium.cs
        startLine: 21
      syntax:
        content:
          CSharp: public override double Perimeter { get; }
          VB: Public Overrides ReadOnly Property Perimeter As Double
        parameters: []
        return:
          type: System.Double
      overload: lab7.Trapezium.Perimeter*
      overridden: lab7.Figure.Perimeter
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: lab7.Trapezium.Center
      commentId: P:lab7.Trapezium.Center
      language: CSharp
      name:
        CSharp: Center
        VB: Center
      nameWithType:
        CSharp: Trapezium.Center
        VB: Trapezium.Center
      qualifiedName:
        CSharp: lab7.Trapezium.Center
        VB: lab7.Trapezium.Center
      type: Property
      assemblies:
      - lab7
      namespace: lab7
      source:
        id: Center
        path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Trapezium.cs
        startLine: 25
      syntax:
        content:
          CSharp: public override Position Center { get; }
          VB: Public Overrides ReadOnly Property Center As Position
        parameters: []
        return:
          type: lab7.Position
      overload: lab7.Trapezium.Center*
      overridden: lab7.Figure.Center
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: lab7.Trapezium.#ctor(System.Double,System.Double,System.Double)
      commentId: M:lab7.Trapezium.#ctor(System.Double,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: Trapezium(Double, Double, Double)
        VB: Trapezium(Double, Double, Double)
      nameWithType:
        CSharp: Trapezium.Trapezium(Double, Double, Double)
        VB: Trapezium.Trapezium(Double, Double, Double)
      qualifiedName:
        CSharp: lab7.Trapezium.Trapezium(System.Double, System.Double, System.Double)
        VB: lab7.Trapezium.Trapezium(System.Double, System.Double, System.Double)
      type: Constructor
      assemblies:
      - lab7
      namespace: lab7
      source:
        id: .ctor
        path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Trapezium.cs
        startLine: 35
      summary: "\nКонструктор фигры трапеция\n"
      example: []
      syntax:
        content:
          CSharp: public Trapezium(double WidthTop, double WidthBottom, double Height)
          VB: Public Sub New(WidthTop As Double, WidthBottom As Double, Height As Double)
        parameters:
        - id: WidthTop
          type: System.Double
          description: Ширина верхнего основания
        - id: WidthBottom
          type: System.Double
          description: Ширина нижнего основания
        - id: Height
          type: System.Double
          description: Высота
      overload: lab7.Trapezium.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: lab7.Trapezium.ToString
      commentId: M:lab7.Trapezium.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: Trapezium.ToString()
        VB: Trapezium.ToString()
      qualifiedName:
        CSharp: lab7.Trapezium.ToString()
        VB: lab7.Trapezium.ToString()
      type: Method
      assemblies:
      - lab7
      namespace: lab7
      source:
        id: ToString
        path: D:\Users\mina987\Desktop\универ\универ 2 семестр\ООП\lab7\Trapezium.cs
        startLine: 43
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: lab7.Trapezium.ToString*
      overridden: lab7.Figure.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
references:
  lab7:
    name:
      CSharp:
      - name: lab7
        nameWithType: lab7
        qualifiedName: lab7
      VB:
      - name: lab7
        nameWithType: lab7
        qualifiedName: lab7
    isDefinition: true
    commentId: N:lab7
  lab7.Figure:
    name:
      CSharp:
      - id: lab7.Figure
        name: Figure
        nameWithType: Figure
        qualifiedName: lab7.Figure
      VB:
      - id: lab7.Figure
        name: Figure
        nameWithType: Figure
        qualifiedName: lab7.Figure
    isDefinition: true
    parent: lab7
    commentId: T:lab7.Figure
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Double:
    name:
      CSharp:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      VB:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Double
  lab7.Figure.Square:
    name:
      CSharp:
      - id: lab7.Figure.Square
        name: Square
        nameWithType: Figure.Square
        qualifiedName: lab7.Figure.Square
      VB:
      - id: lab7.Figure.Square
        name: Square
        nameWithType: Figure.Square
        qualifiedName: lab7.Figure.Square
    isDefinition: true
    parent: lab7.Figure
    commentId: P:lab7.Figure.Square
  lab7.Circle.Square*:
    name:
      CSharp:
      - id: lab7.Circle.Square*
        name: Square
        nameWithType: Circle.Square
        qualifiedName: lab7.Circle.Square
      VB:
      - id: lab7.Circle.Square*
        name: Square
        nameWithType: Circle.Square
        qualifiedName: lab7.Circle.Square
    isDefinition: true
    commentId: Overload:lab7.Circle.Square
  lab7.Figure.Perimeter:
    name:
      CSharp:
      - id: lab7.Figure.Perimeter
        name: Perimeter
        nameWithType: Figure.Perimeter
        qualifiedName: lab7.Figure.Perimeter
      VB:
      - id: lab7.Figure.Perimeter
        name: Perimeter
        nameWithType: Figure.Perimeter
        qualifiedName: lab7.Figure.Perimeter
    isDefinition: true
    parent: lab7.Figure
    commentId: P:lab7.Figure.Perimeter
  lab7.Circle.Perimeter*:
    name:
      CSharp:
      - id: lab7.Circle.Perimeter*
        name: Perimeter
        nameWithType: Circle.Perimeter
        qualifiedName: lab7.Circle.Perimeter
      VB:
      - id: lab7.Circle.Perimeter*
        name: Perimeter
        nameWithType: Circle.Perimeter
        qualifiedName: lab7.Circle.Perimeter
    isDefinition: true
    commentId: Overload:lab7.Circle.Perimeter
  lab7.Position:
    name:
      CSharp:
      - id: lab7.Position
        name: Position
        nameWithType: Position
        qualifiedName: lab7.Position
      VB:
      - id: lab7.Position
        name: Position
        nameWithType: Position
        qualifiedName: lab7.Position
    isDefinition: true
    parent: lab7
    commentId: T:lab7.Position
  lab7.Figure.Center:
    name:
      CSharp:
      - id: lab7.Figure.Center
        name: Center
        nameWithType: Figure.Center
        qualifiedName: lab7.Figure.Center
      VB:
      - id: lab7.Figure.Center
        name: Center
        nameWithType: Figure.Center
        qualifiedName: lab7.Figure.Center
    isDefinition: true
    parent: lab7.Figure
    commentId: P:lab7.Figure.Center
  lab7.Circle.Center*:
    name:
      CSharp:
      - id: lab7.Circle.Center*
        name: Center
        nameWithType: Circle.Center
        qualifiedName: lab7.Circle.Center
      VB:
      - id: lab7.Circle.Center*
        name: Center
        nameWithType: Circle.Center
        qualifiedName: lab7.Circle.Center
    isDefinition: true
    commentId: Overload:lab7.Circle.Center
  lab7.Circle.#ctor*:
    name:
      CSharp:
      - id: lab7.Circle.#ctor*
        name: Circle
        nameWithType: Circle.Circle
        qualifiedName: lab7.Circle.Circle
      VB:
      - id: lab7.Circle.#ctor*
        name: Circle
        nameWithType: Circle.Circle
        qualifiedName: lab7.Circle.Circle
    isDefinition: true
    commentId: Overload:lab7.Circle.#ctor
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  lab7.Figure.ToString:
    name:
      CSharp:
      - id: lab7.Figure.ToString
        name: ToString
        nameWithType: Figure.ToString
        qualifiedName: lab7.Figure.ToString
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: lab7.Figure.ToString
        name: ToString
        nameWithType: Figure.ToString
        qualifiedName: lab7.Figure.ToString
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: lab7.Figure
    commentId: M:lab7.Figure.ToString
  lab7.Circle.ToString*:
    name:
      CSharp:
      - id: lab7.Circle.ToString*
        name: ToString
        nameWithType: Circle.ToString
        qualifiedName: lab7.Circle.ToString
      VB:
      - id: lab7.Circle.ToString*
        name: ToString
        nameWithType: Circle.ToString
        qualifiedName: lab7.Circle.ToString
    isDefinition: true
    commentId: Overload:lab7.Circle.ToString
  lab7.Circle.setPosition*:
    name:
      CSharp:
      - id: lab7.Circle.setPosition*
        name: setPosition
        nameWithType: Circle.setPosition
        qualifiedName: lab7.Circle.setPosition
      VB:
      - id: lab7.Circle.setPosition*
        name: setPosition
        nameWithType: Circle.setPosition
        qualifiedName: lab7.Circle.setPosition
    isDefinition: true
    commentId: Overload:lab7.Circle.setPosition
  lab7.Circle:
    name:
      CSharp:
      - id: lab7.Circle
        name: Circle
        nameWithType: Circle
        qualifiedName: lab7.Circle
      VB:
      - id: lab7.Circle
        name: Circle
        nameWithType: Circle
        qualifiedName: lab7.Circle
    isDefinition: true
    commentId: T:lab7.Circle
  lab7.Figure.Square*:
    name:
      CSharp:
      - id: lab7.Figure.Square*
        name: Square
        nameWithType: Figure.Square
        qualifiedName: lab7.Figure.Square
      VB:
      - id: lab7.Figure.Square*
        name: Square
        nameWithType: Figure.Square
        qualifiedName: lab7.Figure.Square
    isDefinition: true
    commentId: Overload:lab7.Figure.Square
  lab7.Figure.Perimeter*:
    name:
      CSharp:
      - id: lab7.Figure.Perimeter*
        name: Perimeter
        nameWithType: Figure.Perimeter
        qualifiedName: lab7.Figure.Perimeter
      VB:
      - id: lab7.Figure.Perimeter*
        name: Perimeter
        nameWithType: Figure.Perimeter
        qualifiedName: lab7.Figure.Perimeter
    isDefinition: true
    commentId: Overload:lab7.Figure.Perimeter
  lab7.Figure.#ctor*:
    name:
      CSharp:
      - id: lab7.Figure.#ctor*
        name: Figure
        nameWithType: Figure.Figure
        qualifiedName: lab7.Figure.Figure
      VB:
      - id: lab7.Figure.#ctor*
        name: Figure
        nameWithType: Figure.Figure
        qualifiedName: lab7.Figure.Figure
    isDefinition: true
    commentId: Overload:lab7.Figure.#ctor
  lab7.Figure.setPosition*:
    name:
      CSharp:
      - id: lab7.Figure.setPosition*
        name: setPosition
        nameWithType: Figure.setPosition
        qualifiedName: lab7.Figure.setPosition
      VB:
      - id: lab7.Figure.setPosition*
        name: setPosition
        nameWithType: Figure.setPosition
        qualifiedName: lab7.Figure.setPosition
    isDefinition: true
    commentId: Overload:lab7.Figure.setPosition
  lab7.Figure.Center*:
    name:
      CSharp:
      - id: lab7.Figure.Center*
        name: Center
        nameWithType: Figure.Center
        qualifiedName: lab7.Figure.Center
      VB:
      - id: lab7.Figure.Center*
        name: Center
        nameWithType: Figure.Center
        qualifiedName: lab7.Figure.Center
    isDefinition: true
    commentId: Overload:lab7.Figure.Center
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  lab7.Figure.ToString*:
    name:
      CSharp:
      - id: lab7.Figure.ToString*
        name: ToString
        nameWithType: Figure.ToString
        qualifiedName: lab7.Figure.ToString
      VB:
      - id: lab7.Figure.ToString*
        name: ToString
        nameWithType: Figure.ToString
        qualifiedName: lab7.Figure.ToString
    isDefinition: true
    commentId: Overload:lab7.Figure.ToString
  lab7.Position.#ctor*:
    name:
      CSharp:
      - id: lab7.Position.#ctor*
        name: Position
        nameWithType: Position.Position
        qualifiedName: lab7.Position.Position
      VB:
      - id: lab7.Position.#ctor*
        name: Position
        nameWithType: Position.Position
        qualifiedName: lab7.Position.Position
    isDefinition: true
    commentId: Overload:lab7.Position.#ctor
  lab7.Position.ToString*:
    name:
      CSharp:
      - id: lab7.Position.ToString*
        name: ToString
        nameWithType: Position.ToString
        qualifiedName: lab7.Position.ToString
      VB:
      - id: lab7.Position.ToString*
        name: ToString
        nameWithType: Position.ToString
        qualifiedName: lab7.Position.ToString
    isDefinition: true
    commentId: Overload:lab7.Position.ToString
  List`1:
    name:
      CSharp:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: '!:List`1'
  List{lab7.Figure}:
    name:
      CSharp:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: lab7.Figure
        name: Figure
        nameWithType: Figure
        qualifiedName: lab7.Figure
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: lab7.Figure
        name: Figure
        nameWithType: Figure
        qualifiedName: lab7.Figure
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: List`1
    commentId: '!:List{lab7.Figure}'
  lab7.program:
    name:
      CSharp:
      - id: lab7.program
        name: program
        nameWithType: program
        qualifiedName: lab7.program
      VB:
      - id: lab7.program
        name: program
        nameWithType: program
        qualifiedName: lab7.program
    isDefinition: true
    commentId: T:lab7.program
  lab7.Figure.setPosition(lab7.Position):
    name:
      CSharp:
      - id: lab7.Figure.setPosition(lab7.Position)
        name: setPosition
        nameWithType: Figure.setPosition
        qualifiedName: lab7.Figure.setPosition
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: lab7.Position
        name: Position
        nameWithType: Position
        qualifiedName: lab7.Position
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: lab7.Figure.setPosition(lab7.Position)
        name: setPosition
        nameWithType: Figure.setPosition
        qualifiedName: lab7.Figure.setPosition
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: lab7.Position
        name: Position
        nameWithType: Position
        qualifiedName: lab7.Position
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: lab7.Figure
    commentId: M:lab7.Figure.setPosition(lab7.Position)
  lab7.Rectangle.Square*:
    name:
      CSharp:
      - id: lab7.Rectangle.Square*
        name: Square
        nameWithType: Rectangle.Square
        qualifiedName: lab7.Rectangle.Square
      VB:
      - id: lab7.Rectangle.Square*
        name: Square
        nameWithType: Rectangle.Square
        qualifiedName: lab7.Rectangle.Square
    isDefinition: true
    commentId: Overload:lab7.Rectangle.Square
  lab7.Rectangle.Perimeter*:
    name:
      CSharp:
      - id: lab7.Rectangle.Perimeter*
        name: Perimeter
        nameWithType: Rectangle.Perimeter
        qualifiedName: lab7.Rectangle.Perimeter
      VB:
      - id: lab7.Rectangle.Perimeter*
        name: Perimeter
        nameWithType: Rectangle.Perimeter
        qualifiedName: lab7.Rectangle.Perimeter
    isDefinition: true
    commentId: Overload:lab7.Rectangle.Perimeter
  lab7.Rectangle.Center*:
    name:
      CSharp:
      - id: lab7.Rectangle.Center*
        name: Center
        nameWithType: Rectangle.Center
        qualifiedName: lab7.Rectangle.Center
      VB:
      - id: lab7.Rectangle.Center*
        name: Center
        nameWithType: Rectangle.Center
        qualifiedName: lab7.Rectangle.Center
    isDefinition: true
    commentId: Overload:lab7.Rectangle.Center
  lab7.Rectangle.#ctor*:
    name:
      CSharp:
      - id: lab7.Rectangle.#ctor*
        name: Rectangle
        nameWithType: Rectangle.Rectangle
        qualifiedName: lab7.Rectangle.Rectangle
      VB:
      - id: lab7.Rectangle.#ctor*
        name: Rectangle
        nameWithType: Rectangle.Rectangle
        qualifiedName: lab7.Rectangle.Rectangle
    isDefinition: true
    commentId: Overload:lab7.Rectangle.#ctor
  lab7.Rectangle.ToString*:
    name:
      CSharp:
      - id: lab7.Rectangle.ToString*
        name: ToString
        nameWithType: Rectangle.ToString
        qualifiedName: lab7.Rectangle.ToString
      VB:
      - id: lab7.Rectangle.ToString*
        name: ToString
        nameWithType: Rectangle.ToString
        qualifiedName: lab7.Rectangle.ToString
    isDefinition: true
    commentId: Overload:lab7.Rectangle.ToString
  lab7.Rectangle:
    name:
      CSharp:
      - id: lab7.Rectangle
        name: Rectangle
        nameWithType: Rectangle
        qualifiedName: lab7.Rectangle
      VB:
      - id: lab7.Rectangle
        name: Rectangle
        nameWithType: Rectangle
        qualifiedName: lab7.Rectangle
    isDefinition: true
    commentId: T:lab7.Rectangle
  lab7.Trapezium.Square*:
    name:
      CSharp:
      - id: lab7.Trapezium.Square*
        name: Square
        nameWithType: Trapezium.Square
        qualifiedName: lab7.Trapezium.Square
      VB:
      - id: lab7.Trapezium.Square*
        name: Square
        nameWithType: Trapezium.Square
        qualifiedName: lab7.Trapezium.Square
    isDefinition: true
    commentId: Overload:lab7.Trapezium.Square
  lab7.Trapezium.Perimeter*:
    name:
      CSharp:
      - id: lab7.Trapezium.Perimeter*
        name: Perimeter
        nameWithType: Trapezium.Perimeter
        qualifiedName: lab7.Trapezium.Perimeter
      VB:
      - id: lab7.Trapezium.Perimeter*
        name: Perimeter
        nameWithType: Trapezium.Perimeter
        qualifiedName: lab7.Trapezium.Perimeter
    isDefinition: true
    commentId: Overload:lab7.Trapezium.Perimeter
  lab7.Trapezium.Center*:
    name:
      CSharp:
      - id: lab7.Trapezium.Center*
        name: Center
        nameWithType: Trapezium.Center
        qualifiedName: lab7.Trapezium.Center
      VB:
      - id: lab7.Trapezium.Center*
        name: Center
        nameWithType: Trapezium.Center
        qualifiedName: lab7.Trapezium.Center
    isDefinition: true
    commentId: Overload:lab7.Trapezium.Center
  lab7.Trapezium.#ctor*:
    name:
      CSharp:
      - id: lab7.Trapezium.#ctor*
        name: Trapezium
        nameWithType: Trapezium.Trapezium
        qualifiedName: lab7.Trapezium.Trapezium
      VB:
      - id: lab7.Trapezium.#ctor*
        name: Trapezium
        nameWithType: Trapezium.Trapezium
        qualifiedName: lab7.Trapezium.Trapezium
    isDefinition: true
    commentId: Overload:lab7.Trapezium.#ctor
  lab7.Trapezium.ToString*:
    name:
      CSharp:
      - id: lab7.Trapezium.ToString*
        name: ToString
        nameWithType: Trapezium.ToString
        qualifiedName: lab7.Trapezium.ToString
      VB:
      - id: lab7.Trapezium.ToString*
        name: ToString
        nameWithType: Trapezium.ToString
        qualifiedName: lab7.Trapezium.ToString
    isDefinition: true
    commentId: Overload:lab7.Trapezium.ToString
  lab7.Trapezium:
    name:
      CSharp:
      - id: lab7.Trapezium
        name: Trapezium
        nameWithType: Trapezium
        qualifiedName: lab7.Trapezium
      VB:
      - id: lab7.Trapezium
        name: Trapezium
        nameWithType: Trapezium
        qualifiedName: lab7.Trapezium
    isDefinition: true
    commentId: T:lab7.Trapezium
